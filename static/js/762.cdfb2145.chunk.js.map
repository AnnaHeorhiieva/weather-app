{"version":3,"file":"static/js/762.cdfb2145.chunk.js","mappings":"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","sources":["hooks/use-is-mounted.ts","components/weather-details-card/weather-details-card.styles.tsx","components/weather-details-card/weather-details-card.tsx","utils/helpers/configure-chart-data.ts","utils/configs/hourly-chart-settings.ts","components/hourly-chart/hourly-chart.tsx","components/weather-details-chart/weather-details-chart.tsx","store/hourly-weather-slice/hourly-weather-selectors.ts","components/weather-details-main/weather-details-main.styles.tsx","components/weather-details-main/weather-details-main.tsx","components/weather-details-sidebar-block/weather-details-sidebar-block.styles.tsx","components/weather-details-sidebar-block/weather-details-sidebar-block.tsx","components/weather-details-sidebar-blocks/weather-details-sidebar-blocks.styles.tsx","components/weather-details-sidebar-blocks/weather-details-sidebar-blocks.tsx","components/weather-details-sidebar-header/weather-details-sidebar-header.styles.tsx","components/weather-details-sidebar-header/weather-details-sidebar-header.tsx","components/weather-details-sidebar/weather-details-sidebar.styles.tsx","components/weather-details-sidebar/weather-details-sidebar.tsx","pages/city-weather-details-page/city-weather-details-page.styles.tsx","pages/city-weather-details-page/city-weather-details-page.tsx","utils/helpers/get-detailed-weather-data.ts"],"sourcesContent":["import { useEffect, useRef } from \"react\";\n\nexport const useIsMounted = () => {\n  const isMounted = useRef(false);\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return () => isMounted.current;\n};\n","import styled from \"styled-components\";\nimport Card from \"@mui/material/Card\";\nimport Container from \"@mui/material/Container\";\n\nexport const WeatherDetailsWrapper = styled(Card)`\n  && {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n    width: 28%;\n    height: 30%;\n    box-shadow: none;\n    background-color: #c5c5cd21;\n    border-radius: 8px;\n    padding: 20px;\n\n    :hover {\n      background-color: #acacb32b;\n    }\n\n    svg {\n      font-size: 1.2rem;\n      color: #ffa03a;\n      margin-right: 15px;\n    }\n\n    @media (max-width: 430px) {\n      width: 95%;\n      height: 23%;\n      margin: 12px 1%;\n    }\n\n    @media (min-width: 430px) and (max-width: 600px) {\n      width: 38%;\n      height: 100px;\n      margin: 12px 5%;\n    }\n\n    @media (min-width: 600px) and (max-width: 860px) {\n      width: 21%;\n      height: 17%;\n      margin: 12px 2%;\n\n      p {\n        :first-child {\n          font-size: 0.8rem;\n        }\n        :nth-child(2) {\n          font-size: 0.5rem;\n        }\n      }\n    }\n  }\n`;\n\nexport const WeatherDetailsHeader = styled(Container)`\n  && {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-direction: row;\n    width: 100%;\n    height: 40%;\n    padding: 0;\n\n    @media (min-width: 1200px) {\n      max-width: none;\n    }\n  }\n`;\n\nexport const WeatherDetailsValue = styled(Container)`\n  && {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: row;\n    width: 100%;\n    height: 60%;\n    padding: 0;\n\n    @media (min-width: 1200px) {\n      max-width: none;\n    }\n  }\n`;\n","import React from \"react\";\n\nimport { MUIIcon } from \"utils/helpers/get-detailed-weather-data\";\n\nimport BoldText from \"mui-shared-components/bold-text/bold-text\";\nimport {\n  WeatherDetailsHeader,\n  WeatherDetailsWrapper,\n  WeatherDetailsValue,\n} from \"components/weather-details-card/weather-details-card.styles\";\n\ninterface WeatherDetailsCardProps {\n  detailName: string;\n  detailValue: string;\n  detailIcon: MUIIcon;\n}\n\nfunction WeatherDetailsCard({\n  detailName,\n  detailValue,\n  detailIcon: DetailIcon,\n}: WeatherDetailsCardProps): JSX.Element {\n  return (\n    <WeatherDetailsWrapper>\n      <WeatherDetailsHeader>\n        <DetailIcon />\n        <BoldText color=\"#c7c8ce\" fontSize=\"0.8\">\n          {detailName}\n        </BoldText>\n      </WeatherDetailsHeader>\n      <WeatherDetailsValue>\n        <BoldText color=\"#174456\" fontSize=\"1.1\">\n          {detailValue}\n        </BoldText>\n      </WeatherDetailsValue>\n    </WeatherDetailsWrapper>\n  );\n}\n\nexport default WeatherDetailsCard;\n","import { HourlyWeatherEntities } from \"store/hourly-weather-slice/hourly-weather-slice.types\";\n\nexport function configureChartData(dataX: number[], dataY: number[]) {\n  return {\n    labels: dataX,\n    datasets: [\n      {\n        label: \"Temperature at certain hour, °C\",\n        data: dataY,\n        backgroundColor: \"#0e193b\",\n        stack: \"Stack 0\",\n      },\n    ],\n  };\n}\n\nfunction handleReduce(dataArr: number[], num: number, i: number) {\n  const isNotFirstElement = Boolean(i !== 0);\n  const previousElement = dataArr[i - 1];\n  if (isNotFirstElement) {\n    if (previousElement === 24) dataArr.push(num);\n    else dataArr.push(previousElement + 1);\n  }\n  return dataArr;\n}\n\nexport function createDataX(arrStartNumber: number) {\n  const arrayOfOnes = new Array(24).fill(1);\n  const dataX = arrayOfOnes.reduce(\n    (dataArr, num, i) => handleReduce(dataArr, num, i),\n    [arrStartNumber]\n  );\n  return dataX;\n}\n\nexport function createDataY(tempArray: HourlyWeatherEntities) {\n  const dataY = tempArray?.map((tempObj) => tempObj.temp);\n  return dataY;\n}\n","export const options = {\n  responsive: true,\n  interaction: {\n    mode: \"index\" as const,\n    intersect: false,\n  },\n  scales: {\n    x: {\n      stacked: true,\n    },\n    y: {\n      stacked: true,\n    },\n  },\n};\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nimport { options } from \"utils/configs/hourly-chart-settings\";\nimport { configureChartData } from \"utils/helpers/configure-chart-data\";\n\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\ninterface HourlyChartProps {\n  dataX: number[];\n  dataY: number[];\n}\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nfunction HourlyChart({ dataX, dataY }: HourlyChartProps): JSX.Element {\n  const data = configureChartData(dataX, dataY);\n  return <Bar options={options} data={data} updateMode=\"show\" height=\"100%\" />;\n}\n\nexport default HourlyChart;\n","import React from \"react\";\nimport { useAppSelector } from \"store/redux-hooks\";\n\nimport { createDataX, createDataY } from \"utils/helpers/configure-chart-data\";\nimport { getCityTime } from \"utils/helpers/configure-weather-data\";\nimport {\n  hourlySelector,\n  timezoneSelector,\n} from \"store/hourly-weather-slice/hourly-weather-selectors\";\n\nimport HourlyChart from \"components/hourly-chart/hourly-chart\";\n\nfunction WeatherDetailsChart(): JSX.Element {\n  const hourlyWeatherArray = useAppSelector((state) => hourlySelector(state));\n  const weatherTimezoneNum = useAppSelector((state) => timezoneSelector(state));\n\n  const currentLocalTimestamp = Date.now();\n  const chartStartTime = getCityTime(currentLocalTimestamp, weatherTimezoneNum);\n  const chartStartHours = Number(chartStartTime.slice(0, 2));\n\n  const dataX = createDataX(chartStartHours);\n  const dataY = createDataY(hourlyWeatherArray);\n\n  return <HourlyChart dataX={dataX} dataY={dataY} />;\n}\n\nexport default WeatherDetailsChart;\n","import { RootState } from \"store/store\";\n\nimport { HourlyWeatherEntities } from \"store/hourly-weather-slice/hourly-weather-slice.types\";\n\nexport function timezoneSelector(state: RootState): number {\n  return state.hourlyWeather.hourlyCityWeather.timezone_offset;\n}\n\nexport function hourlySelector(state: RootState): HourlyWeatherEntities {\n  return state.hourlyWeather.hourlyCityWeather.hourly;\n}\n","import styled from \"styled-components\";\nimport Container from \"@mui/material/Container\";\n\nexport const DetailsPageMain = styled(Container)`\n  && {\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-start;\n    flex-direction: column;\n    width: 65%;\n    height: 100vh;\n    padding: 0;\n\n    @media (max-width: 600px) {\n      width: 100%;\n      height: inherit;\n    }\n\n    @media (min-width: 600px) and (max-width: 860px) {\n      width: 100%;\n    }\n\n    @media (min-width: 1200px) {\n      max-width: 65%;\n    }\n  }\n`;\n\nexport const LinkSection = styled(Container)`\n  && {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-direction: row;\n    width: 100%;\n    height: 6vh;\n    padding: 0 5%;\n\n    @media (max-width: 860px) {\n      display: none;\n    }\n\n    @media (min-width: 1200px) {\n      max-width: 100%;\n    }\n  }\n`;\n\nexport const WeatherDetailsSection = styled(Container)`\n  && {\n    display: flex;\n    background-color: #fff;\n    justify-content: space-between;\n    align-items: flex-start;\n    flex-direction: row;\n    flex-wrap: wrap;\n    width: 100%;\n    height: 55vh;\n    padding: 3% 5%;\n\n    @media (max-width: 860px) {\n      height: 100%;\n      justify-content: center;\n    }\n\n    @media (min-width: 1200px) {\n      max-width: 100%;\n    }\n  }\n`;\n\nexport const HourlyChartSection = styled(Container)`\n  && {\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n    width: 100%;\n    height: 39vh;\n    padding: 1% 5%;\n\n    @media (max-width: 860px) {\n      display: none;\n    }\n\n    @media (min-width: 860px) and (max-width: 1200px) {\n      align-items: center;\n    }\n\n    @media (min-width: 1200px) {\n      max-width: 100%;\n    }\n  }\n`;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\n\nimport {\n  MainWeatherDetails,\n  AllWeatherData,\n} from \"utils/helpers/get-detailed-weather-data\";\n\nimport BoldText from \"mui-shared-components/bold-text/bold-text\";\nimport WeatherDetailsCard from \"components/weather-details-card/weather-details-card\";\nimport WeatherDetailsChart from \"components/weather-details-chart/weather-details-chart\";\nimport {\n  DetailsPageMain,\n  HourlyChartSection,\n  LinkSection,\n  WeatherDetailsSection,\n} from \"components/weather-details-main/weather-details-main.styles\";\n\ninterface WeatherDetailsMainPorps {\n  mainWeatherDetails: MainWeatherDetails;\n  allWeatherData: AllWeatherData;\n}\n\nconst NO_DATA = \"No data\";\n\nfunction WeatherDetailsMain({\n  mainWeatherDetails,\n  allWeatherData,\n}: WeatherDetailsMainPorps): JSX.Element {\n  const isLowerThan860px = useMediaQuery(\"(max-width:860px)\");\n\n  const weatherData = isLowerThan860px ? allWeatherData : mainWeatherDetails;\n  const mainDetailsArray = Object.entries(weatherData);\n\n  const renderWeatherDetailsCards = mainDetailsArray.map(\n    ([detailName, detailData]) => {\n      const [detailValue = NO_DATA, detailIcon] = detailData;\n      return (\n        <WeatherDetailsCard\n          key={detailName}\n          detailName={detailName}\n          detailValue={detailValue}\n          detailIcon={detailIcon}\n        />\n      );\n    }\n  );\n\n  return (\n    <DetailsPageMain>\n      <LinkSection>\n        <Link to=\"/\">\n          <BoldText color=\"#0e193b\" fontSize=\"0.8\">\n            Back to Main\n          </BoldText>\n        </Link>\n      </LinkSection>\n      <WeatherDetailsSection>{renderWeatherDetailsCards}</WeatherDetailsSection>\n      <HourlyChartSection>\n        <WeatherDetailsChart />\n      </HourlyChartSection>\n    </DetailsPageMain>\n  );\n}\n\nexport default WeatherDetailsMain;\n","import styled from \"styled-components\";\nimport Container from \"@mui/material/Container\";\n\nexport const DetailsPageSidebarBlock = styled(Container)`\n  && {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-direction: row;\n    width: 100%;\n    height: 10vh;\n    padding: 5% 7%;\n    background-color: #ffffff43;\n    border-radius: 8px;\n    margin-bottom: 1vh;\n\n    :last-child {\n      margin-bottom: 0;\n    }\n\n    svg {\n      font-size: 1.2rem;\n      color: #ff8d14;\n    }\n\n    @media (min-width: 1200px) {\n      max-width: 100%;\n    }\n  }\n`;\n\nexport const BlockIconContainer = styled(Container)`\n  && {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    width: 16%;\n    height: 100%;\n    padding: 0;\n\n    @media (min-width: 1200px) {\n      max-width: 100%;\n    }\n  }\n`;\n\nexport const BlockValueContainer = styled(Container)`\n  && {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    flex-direction: column;\n    width: 84%;\n    height: 100%;\n    padding: 0;\n\n    @media (min-width: 1200px) {\n      max-width: 100%;\n    }\n  }\n`;\n","import React from \"react\";\n\nimport { MUIIcon } from \"utils/helpers/get-detailed-weather-data\";\n\nimport BoldText from \"mui-shared-components/bold-text/bold-text\";\nimport {\n  BlockIconContainer,\n  BlockValueContainer,\n  DetailsPageSidebarBlock,\n} from \"components/weather-details-sidebar-block/weather-details-sidebar-block.styles\";\n\ninterface DetailsSidebarBlockProps {\n  blockName: string;\n  blockValue: number | string;\n  blockIcon: MUIIcon;\n}\n\nfunction WeatherDetailsSidebarBlock({\n  blockName,\n  blockValue,\n  blockIcon: BlockIcon,\n}: DetailsSidebarBlockProps): JSX.Element {\n  return (\n    <DetailsPageSidebarBlock>\n      <BlockIconContainer>\n        <BlockIcon />\n      </BlockIconContainer>\n      <BlockValueContainer>\n        <BoldText color=\"#dde1f9\" fontSize=\"0.8\">\n          {blockName}\n        </BoldText>\n        <BoldText color=\"#121318\" fontSize=\"1.1\">\n          {blockValue}\n        </BoldText>\n      </BlockValueContainer>\n    </DetailsPageSidebarBlock>\n  );\n}\n\nexport default WeatherDetailsSidebarBlock;\n","import styled from \"styled-components\";\nimport Container from \"@mui/material/Container\";\n\nexport const DetailsPageSidebarBlocks = styled(Container)`\n  && {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-direction: column;\n    width: 100%;\n    height: 78vh;\n    padding: 0;\n    padding-top: 8%;\n\n    @media (max-width: 860px) {\n      display: none;\n    }\n\n    @media (min-width: 1200px) {\n      max-width: 100%;\n    }\n  }\n`;\n","import React from \"react\";\n\nimport { MUIIcon } from \"utils/helpers/get-detailed-weather-data\";\n\nimport WeatherDetailsSidebarBlock from \"components/weather-details-sidebar-block/weather-details-sidebar-block\";\nimport { DetailsPageSidebarBlocks } from \"components/weather-details-sidebar-blocks/weather-details-sidebar-blocks.styles\";\n\ninterface DetailsSidebarBlocksProps {\n  sidebarBlocksArray: [string, [number | string, MUIIcon]][];\n}\n\nfunction WeatherDetailsSidebarBlocks({\n  sidebarBlocksArray,\n}: DetailsSidebarBlocksProps): JSX.Element {\n  const renderSidebarBlocks = sidebarBlocksArray.map(\n    ([blockName, blockData]) => {\n      const [blockValue = \"No data\", blockIcon] = blockData;\n\n      return (\n        <WeatherDetailsSidebarBlock\n          key={blockName}\n          blockName={blockName}\n          blockValue={blockValue}\n          blockIcon={blockIcon}\n        />\n      );\n    }\n  );\n\n  return (\n    <DetailsPageSidebarBlocks data-testid=\"sidebar-blocks\">\n      {renderSidebarBlocks}\n    </DetailsPageSidebarBlocks>\n  );\n}\n\nexport default WeatherDetailsSidebarBlocks;\n","import styled from \"styled-components\";\nimport Container from \"@mui/material/Container\";\n\nexport const DetailsPageSidebarHeader = styled(Container)`\n  && {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    flex-direction: column;\n    width: 100%;\n    height: 22vh;\n    padding: 0;\n\n    @media (max-width: 860px) {\n      height: 180px;\n\n      a {\n        height: 40px;\n      }\n    }\n\n    @media (min-width: 1200px) {\n      max-width: 100%;\n    }\n  }\n`;\n\nexport const WeatherDetailsImage = styled.img`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 45px;\n  height: 45px;\n  object-fit: cover;\n  color: #ffa03a;\n`;\n\nexport const CityContainer = styled(Container)`\n  && {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0;\n\n    @media (min-width: 1200px) {\n      max-width: 100%;\n    }\n  }\n`;\n\nexport const TemperatureContainer = styled(Container)`\n  && {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0;\n\n    @media (min-width: 1200px) {\n      max-width: 100%;\n    }\n  }\n`;\n","import React from \"react\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n  capitalizeDescription,\n  getCityTime,\n} from \"utils/helpers/configure-weather-data\";\n\nimport BoldText from \"mui-shared-components/bold-text/bold-text\";\nimport {\n  CityContainer,\n  DetailsPageSidebarHeader,\n  TemperatureContainer,\n  WeatherDetailsImage,\n} from \"components/weather-details-sidebar-header/weather-details-sidebar-header.styles\";\n\ninterface SidebarHeaderProps {\n  temperature: string;\n  cityName: string;\n  icon: string;\n  description: string;\n  timezone: number;\n}\n\nfunction WeatherDetailsSidebarHeader({\n  temperature,\n  cityName,\n  icon,\n  description,\n  timezone,\n}: SidebarHeaderProps): JSX.Element {\n  const isLowerThan860px = useMediaQuery(\"(max-width:860px)\");\n\n  const currentLocalTimestamp = Date.now();\n  const cityTime = getCityTime(currentLocalTimestamp, timezone);\n\n  const capitalisedDescription = capitalizeDescription(description);\n\n  return (\n    <DetailsPageSidebarHeader>\n      {isLowerThan860px ? (\n        <Link to=\"/\">\n          <BoldText color=\"#fff\" fontSize=\"1\">\n            Back to Main\n          </BoldText>\n        </Link>\n      ) : null}\n      <CityContainer>\n        <BoldText color=\"#ffa03a\" fontSize=\"1.5\">\n          {cityName}\n        </BoldText>\n        <BoldText color=\"#ffa03a\" fontSize=\"1.5\">\n          {cityTime}\n        </BoldText>\n      </CityContainer>\n      <WeatherDetailsImage src={icon} />\n      <TemperatureContainer>\n        <BoldText color=\"#fff\" fontSize=\"1.6\">\n          {temperature}\n        </BoldText>\n        <BoldText color=\"#fff\" fontSize=\"1.2\">\n          {capitalisedDescription}\n        </BoldText>\n      </TemperatureContainer>\n    </DetailsPageSidebarHeader>\n  );\n}\n\nexport default WeatherDetailsSidebarHeader;\n","import styled from \"styled-components\";\nimport clouds from \"assets/clouds-background.jpg\";\nimport Container from \"@mui/material/Container\";\n\nexport const DetailsPageSidebar = styled(Container)`\n  && {\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-start;\n    flex-direction: column;\n    width: 35%;\n    height: 100vh;\n    padding: 5%;\n    background-image: url(${clouds});\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-position: right;\n\n    @media (max-width: 860px) {\n      width: 100%;\n      height: 20vh;\n      min-height: 180px;\n      justify-content: center;\n      align-items: center;\n    }\n\n    @media (min-width: 1200px) {\n      max-width: 35%;\n    }\n  }\n`;\n","import React from \"react\";\n\nimport { SidebarWeatherDetails } from \"utils/helpers/get-detailed-weather-data\";\n\nimport WeatherDetailsSidebarBlocks from \"components/weather-details-sidebar-blocks/weather-details-sidebar-blocks\";\nimport WeatherDetailsSidebarHeader from \"components/weather-details-sidebar-header/weather-details-sidebar-header\";\nimport { DetailsPageSidebar } from \"components/weather-details-sidebar/weather-details-sidebar.styles\";\n\ninterface WeatherDetailsSidebarProps {\n  sidebarWeatherDetails: SidebarWeatherDetails;\n}\n\nfunction WeatherDetailsSidebar({\n  sidebarWeatherDetails,\n}: WeatherDetailsSidebarProps): JSX.Element {\n  const { temperature, cityName, icon, description, timezone } =\n    sidebarWeatherDetails;\n\n  const detailsSidebarBlocks = sidebarWeatherDetails.sidebarBlocks;\n  const sidebarBlocksArray = Object.entries(detailsSidebarBlocks);\n\n  return (\n    <DetailsPageSidebar>\n      <WeatherDetailsSidebarHeader\n        temperature={temperature}\n        cityName={cityName}\n        icon={icon}\n        description={description}\n        timezone={timezone}\n      />\n      <WeatherDetailsSidebarBlocks sidebarBlocksArray={sidebarBlocksArray} />\n    </DetailsPageSidebar>\n  );\n}\n\nexport default WeatherDetailsSidebar;\n","import styled from \"styled-components\";\nimport Container from \"@mui/material/Container\";\n\nexport const DetailsPageContainer = styled(Container)`\n  && {\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-start;\n    width: 100%;\n    height: 100vh;\n    padding: 0;\n    background-color: #fff;\n\n    @media (max-width: 860px) {\n      flex-direction: column-reverse;\n      height: inherit;\n    }\n\n    @media (min-width: 1200px) {\n      max-width: 100%;\n    }\n  }\n`;\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"store/redux-hooks\";\n\nimport { currentWeatherSelector } from \"store/current-weather-slice/current-weather-selectors\";\nimport { getCurrentCityWeather } from \"store/current-weather-slice/current-weather-slice\";\nimport {\n  getHourlyCityWeather,\n  resetHourlyCityWeather,\n} from \"store/hourly-weather-slice/hourly-weather-slice\";\nimport { getDetailedWeatherData } from \"utils/helpers/get-detailed-weather-data\";\nimport { useIsMounted } from \"hooks/use-is-mounted\";\n\nimport WeatherDetailsMain from \"components/weather-details-main/weather-details-main\";\nimport WeatherDetailsSidebar from \"components/weather-details-sidebar/weather-details-sidebar\";\nimport { DetailsPageContainer } from \"pages/city-weather-details-page/city-weather-details-page.styles\";\n\nfunction CityWeatherDetailsPage(): JSX.Element {\n  const mounted = useIsMounted();\n\n  const dispatch = useAppDispatch();\n  const currWeather = useAppSelector((state) => currentWeatherSelector(state));\n\n  const { cityName } = useParams() as { cityName: string };\n  const cityWeather = currWeather[cityName];\n  const cityCoordinates = cityWeather?.coord;\n\n  const weatherData = getDetailedWeatherData(cityWeather);\n  const { mainWeatherDetails, sidebarWeatherDetails, allWeatherData } =\n    weatherData;\n\n  useEffect(() => {\n    dispatch(getCurrentCityWeather(cityName));\n    dispatch(getHourlyCityWeather(cityCoordinates));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityName, dispatch]);\n\n  useEffect(\n    () => () => {\n      if (mounted() === false) dispatch(resetHourlyCityWeather());\n    },\n\n    [mounted, dispatch]\n  );\n\n  return (\n    <DetailsPageContainer>\n      <WeatherDetailsMain\n        mainWeatherDetails={mainWeatherDetails}\n        allWeatherData={allWeatherData}\n      />\n      <WeatherDetailsSidebar sidebarWeatherDetails={sidebarWeatherDetails} />\n    </DetailsPageContainer>\n  );\n}\n\nexport default CityWeatherDetailsPage;\n","import { CityWeatherEntity } from \"store/current-weather-slice/current-weather-slice.types\";\nimport { SvgIcon } from \"@mui/material\";\n\nimport { getImgUrl, getCityTime } from \"utils/helpers/configure-weather-data\";\nimport { transformStrategyObj } from \"utils/configs/transform-strategy-object\";\nimport { transformWeather } from \"utils/helpers/transform-current-weather\";\n\nimport AcUnitOutlinedIcon from \"@mui/icons-material/AcUnitOutlined\";\nimport AirOutlinedIcon from \"@mui/icons-material/AirOutlined\";\nimport CompressOutlinedIcon from \"@mui/icons-material/CompressOutlined\";\nimport CloudOutlinedIcon from \"@mui/icons-material/CloudOutlined\";\nimport InvertColorsOutlinedIcon from \"@mui/icons-material/InvertColorsOutlined\";\nimport GrassOutlinedIcon from \"@mui/icons-material/GrassOutlined\";\nimport SolarPowerOutlinedIcon from \"@mui/icons-material/SolarPowerOutlined\";\nimport StormOutlinedIcon from \"@mui/icons-material/StormOutlined\";\nimport ThermostatOutlinedIcon from \"@mui/icons-material/ThermostatOutlined\";\nimport TsunamiOutlinedIcon from \"@mui/icons-material/TsunamiOutlined\";\nimport VisibilityOutlinedIcon from \"@mui/icons-material/VisibilityOutlined\";\nimport WaterOutlinedIcon from \"@mui/icons-material/WaterOutlined\";\nimport WbSunnyOutlinedIcon from \"@mui/icons-material/WbSunnyOutlined\";\nimport WbTwilightOutlinedIcon from \"@mui/icons-material/WbTwilightOutlined\";\n\nexport type MUIIcon = typeof SvgIcon;\n\nexport interface SidebarBlocks {\n  \"Wind speed\": [string, MUIIcon];\n  \"Wind gust\": [string, MUIIcon];\n  \"Max temperature\": [string, MUIIcon];\n  \"Min temperature\": [string, MUIIcon];\n  Sunrise: [string, MUIIcon];\n  Sunset: [string, MUIIcon];\n}\n\nexport interface MainWeatherDetails {\n  \"Feels like\": [string, MUIIcon];\n  Cloudiness: [string, MUIIcon];\n  Visibility: [string, MUIIcon];\n  Humidity: [string, MUIIcon];\n  Pressure: [string, MUIIcon];\n  \"Rain Volume (for 1 hour)\": [string, MUIIcon];\n  \"Snow Volume (for 1 hour)\": [string, MUIIcon];\n  \"Sea Level\": [string, MUIIcon];\n  \"Ground Level\": [string, MUIIcon];\n}\n\nexport interface SidebarWeatherDetails {\n  cityName: string;\n  temperature: string;\n  description: string;\n  timezone: number;\n  icon: string;\n  sidebarBlocks: SidebarBlocks;\n}\n\nexport type AllWeatherData = MainWeatherDetails & SidebarBlocks;\n\nexport interface WeatherDetails {\n  mainWeatherDetails: MainWeatherDetails;\n  sidebarWeatherDetails: SidebarWeatherDetails;\n  allWeatherData: AllWeatherData;\n}\n\nexport function getDetailedWeatherData(cityWeather: CityWeatherEntity) {\n  const modifiedWeather = transformWeather(cityWeather, transformStrategyObj);\n\n  const { main, weather, sys, visibility, name, timezone } = modifiedWeather;\n  const { wind, clouds, rain, snow } = modifiedWeather;\n\n  const { humidity, pressure, sea_level, grnd_level } = main;\n  const { temp, feels_like, temp_max, temp_min } = main;\n  const { description, icon } = weather[0];\n  const { sunrise, sunset } = sys;\n  const { speed, gust } = wind;\n  const cloudiness = clouds?.all;\n  const rainVolume1h = rain?.[\"1h\"];\n  const snowVolume1h = snow?.[\"1h\"];\n\n  const sunriseSeconds = sunrise * 1000;\n  const sunsetSeconds = sunset * 1000;\n  const citySunriseTime = getCityTime(sunriseSeconds, timezone);\n  const citySunsetTime = getCityTime(sunsetSeconds, timezone);\n\n  const mainWeatherDetails = {\n    \"Feels like\": [feels_like, WbSunnyOutlinedIcon],\n    Cloudiness: [cloudiness, CloudOutlinedIcon],\n    Visibility: [visibility, VisibilityOutlinedIcon],\n    Humidity: [humidity, WaterOutlinedIcon],\n    Pressure: [pressure, CompressOutlinedIcon],\n    \"Rain Volume (for 1 hour)\": [rainVolume1h, InvertColorsOutlinedIcon],\n    \"Snow Volume (for 1 hour)\": [snowVolume1h, AcUnitOutlinedIcon],\n    \"Sea Level\": [sea_level, TsunamiOutlinedIcon],\n    \"Ground Level\": [grnd_level, GrassOutlinedIcon],\n  };\n\n  const sidebarWeatherDetails = {\n    cityName: name,\n    temperature: temp,\n    icon: getImgUrl(icon),\n    description,\n    timezone,\n    sidebarBlocks: {\n      \"Max temperature\": [temp_max, SolarPowerOutlinedIcon],\n      \"Min temperature\": [temp_min, ThermostatOutlinedIcon],\n      \"Wind speed\": [speed, AirOutlinedIcon],\n      \"Wind gust\": [gust, StormOutlinedIcon],\n      Sunrise: [citySunriseTime, WbSunnyOutlinedIcon],\n      Sunset: [citySunsetTime, WbTwilightOutlinedIcon],\n    },\n  };\n\n  const allWeatherData = {\n    \"Max temperature\": [temp_max, SolarPowerOutlinedIcon],\n    \"Min temperature\": [temp_min, ThermostatOutlinedIcon],\n    \"Wind speed\": [speed, AirOutlinedIcon],\n    \"Wind gust\": [gust, StormOutlinedIcon],\n    Sunrise: [citySunriseTime, WbSunnyOutlinedIcon],\n    Sunset: [citySunsetTime, WbTwilightOutlinedIcon],\n    \"Feels like\": [feels_like, WbSunnyOutlinedIcon],\n    Cloudiness: [cloudiness, CloudOutlinedIcon],\n    Visibility: [visibility, VisibilityOutlinedIcon],\n    Humidity: [humidity, WaterOutlinedIcon],\n    Pressure: [pressure, CompressOutlinedIcon],\n    \"Rain Volume (for 1 hour)\": [rainVolume1h, InvertColorsOutlinedIcon],\n    \"Snow Volume (for 1 hour)\": [snowVolume1h, AcUnitOutlinedIcon],\n    \"Sea Level\": [sea_level, TsunamiOutlinedIcon],\n    \"Ground Level\": [grnd_level, GrassOutlinedIcon],\n  };\n\n  return {\n    mainWeatherDetails,\n    sidebarWeatherDetails,\n    allWeatherData,\n  } as WeatherDetails;\n}\n"],"names":["WeatherDetailsWrapper","styled","Card","WeatherDetailsHeader","Container","WeatherDetailsValue","detailName","detailValue","DetailIcon","detailIcon","color","fontSize","createDataX","arrStartNumber","Array","fill","reduce","dataArr","num","i","isNotFirstElement","Boolean","previousElement","push","handleReduce","options","responsive","interaction","mode","intersect","scales","x","stacked","y","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","data","dataX","dataY","labels","datasets","label","backgroundColor","stack","configureChartData","updateMode","height","tempArray","hourlyWeatherArray","useAppSelector","state","hourlyWeather","hourlyCityWeather","hourly","hourlySelector","weatherTimezoneNum","timezone_offset","timezoneSelector","currentLocalTimestamp","Date","now","chartStartTime","getCityTime","Number","slice","map","tempObj","temp","DetailsPageMain","LinkSection","WeatherDetailsSection","HourlyChartSection","mainWeatherDetails","allWeatherData","weatherData","useMediaQuery","renderWeatherDetailsCards","Object","entries","detailData","to","DetailsPageSidebarBlock","BlockIconContainer","BlockValueContainer","blockName","blockValue","BlockIcon","blockIcon","DetailsPageSidebarBlocks","renderSidebarBlocks","sidebarBlocksArray","blockData","DetailsPageSidebarHeader","WeatherDetailsImage","CityContainer","TemperatureContainer","temperature","cityName","icon","description","timezone","isLowerThan860px","cityTime","capitalisedDescription","capitalizeDescription","src","DetailsPageSidebar","clouds","sidebarWeatherDetails","detailsSidebarBlocks","sidebarBlocks","DetailsPageContainer","mounted","isMounted","useRef","useEffect","current","useIsMounted","dispatch","useAppDispatch","currWeather","currentWeatherSelector","useParams","cityWeather","cityCoordinates","coord","modifiedWeather","transformWeather","transformStrategyObj","main","weather","sys","visibility","name","wind","rain","snow","humidity","pressure","sea_level","grnd_level","feels_like","temp_max","temp_min","sunrise","sunset","speed","gust","cloudiness","all","rainVolume1h","snowVolume1h","sunriseSeconds","sunsetSeconds","citySunriseTime","citySunsetTime","WbSunnyOutlinedIcon","Cloudiness","CloudOutlinedIcon","Visibility","VisibilityOutlinedIcon","Humidity","WaterOutlinedIcon","Pressure","CompressOutlinedIcon","InvertColorsOutlinedIcon","AcUnitOutlinedIcon","TsunamiOutlinedIcon","GrassOutlinedIcon","getImgUrl","SolarPowerOutlinedIcon","ThermostatOutlinedIcon","AirOutlinedIcon","StormOutlinedIcon","Sunrise","Sunset","WbTwilightOutlinedIcon","getDetailedWeatherData","getCurrentCityWeather","getHourlyCityWeather","resetHourlyCityWeather"],"sourceRoot":""}